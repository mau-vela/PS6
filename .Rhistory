newrow <- data.frame(t(c(name, val)))
senate_group <- rbind(senate_group, newrow)
}
}
senate_group <- lapply(senate_group, as.numeric)
senate_group <- data.frame(NULL)
for(i in unique(senate$country)){
sub <- senate[senate$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
senate_group <- rbind(senate_group, newrow)
}
}
senate_group[,c("elecrule", "tier1_formula", "tier2_formula")] <- lapply(senate_group[,c("elecrule", "tier1_formula", "tier2_formula")], as.factor)
senate_group <- data.frame(NULL)
for(i in unique(senate$country)){
sub <- senate[senate$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
senate_group <- rbind(senate_group, newrow)
}
}
senate_group <- as.data.frame(lapply(senate_group, as.numeric))
senate_group[,c("elecrule", "tier1_formula", "tier2_formula")] <- lapply(senate_group[,c("elecrule", "tier1_formula", "tier2_formula")], as.factor)
senate_group <- na.omit(senate_group)
levels(senate_group$tier1_formula)
View(senate_group)
g.dist = daisy(senate_group[,c("elecrule", "Carey_Hix_mean_dm")], metric="gower", type=list(symm=2))
View(senate_group)
View(data)
senate_group <- data.frame(NULL)
for(i in unique(senate$country)){
sub <- senate[senate$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
senate_group <- rbind(senate_group, newrow)
}
}
senate_group <- as.data.frame(lapply(senate_group, as.numeric))
senate_group[,c("elecrule", "tier1_formula", "tier2_formula")] <- lapply(senate_group[,c("elecrule", "tier1_formula", "tier2_formula")], function(x) as.factor(x)-1)
senate_group <- data.frame(NULL)
for(i in unique(senate$country)){
sub <- senate[senate$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
senate_group <- rbind(senate_group, newrow)
}
}
senate_group <- as.data.frame(lapply(senate_group, as.numeric))
senate_group[,c("elecrule", "tier1_formula", "tier2_formula")] <- lapply(senate_group[,c("elecrule", "tier1_formula", "tier2_formula")], function(x) as.factor(as.numeric(as.factor(x))-1))
senate_group <- na.omit(senate_group)
g.dist = daisy(senate_group[,c("elecrule", "Carey_Hix_mean_dm")], metric="gower", type=list(symm=2))
senate_group[,c("elecrule", "Carey_Hix_mean_dm")]
data
levels(data$ord)
levels(senate_group$elecrule)
g.dist = daisy(data, metric="gower"
)
?daisy
g.dist = daisy(senate_group[,c("elecrule", "Carey_Hix_mean_dm")], metric="gower")
hc.c = hclust(g.dist, method="complete")
plot(hc.c)
# group senate by country and bloc
senate_group <- data.frame(NULL)
for(i in unique(senate$country)){
sub <- senate[senate$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
senate_group <- rbind(senate_group, newrow)
}
}
senate_group <- as.data.frame(lapply(senate_group, as.numeric))
senate_group[,c("elecrule", "tier1_formula", "tier2_formula")] <- lapply(senate_group[,c("elecrule", "tier1_formula", "tier2_formula")], as.factor)
senate_group <- na.omit(senate_group)
g.dist = daisy(senate_group[,c("elecrule", "Carey_Hix_mean_dm")], metric="gower")
hc.c = hclust(g.dist, method="complete")
plot(hc.c)
hc.c$labels <- senate_group[,1]
plot(hc.c)
hc.c$labels <- senate_group[,1]
hc.c$labels <- senate_group[-1,1]
plot(hc.c)
hc.c
senate_group <- data.frame(NULL)
for(i in unique(senate$country)){
sub <- senate[senate$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
senate_group <- rbind(senate_group, newrow)
}
}
senate_group <- as.data.frame(lapply(senate_group, as.numeric))
senate_group[,c("elecrule", "tier1_formula", "tier2_formula")] <- lapply(senate_group[,c("elecrule", "tier1_formula", "tier2_formula")], as.factor)
#senate_group <- na.omit(senate_group)
g.dist = daisy(senate_group[,c("elecrule", "Carey_Hix_mean_dm")], metric="gower")
hc.c = hclust(g.dist, method="complete")
hc.c$labels
senate_group[-1,1]
View(senate_group)
senate_group <- data.frame(NULL)
for(i in unique(senate$country)){
sub <- senate[senate$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
senate_group <- rbind(senate_group, newrow)
}
}
senate_group[,-1] <- as.data.frame(lapply(senate_group[,-1], as.numeric))
senate_group[,c("elecrule", "tier1_formula", "tier2_formula")] <- lapply(senate_group[,c("elecrule", "tier1_formula", "tier2_formula")], as.factor)
senate_group <- na.omit(senate_group)
g.dist = daisy(senate_group[,c("elecrule", "Carey_Hix_mean_dm")], metric="gower")
hc.c = hclust(g.dist, method="complete")
hc.c$labels <- senate_group[-1,1]
plot(hc.c)
g.dist = daisy(senate_group[,c("elecrule", "Carey_Hix_mean_dm")], metric="gower")
hc.c = hclust(g.dist, method="complete")
plot(hc.c)
hc.c$labels
senate_group[,1]
senate_group[-1,1]
length(senate_group[-1,1])
length(hc.c$labels)
hc.c$labels <- senate_group[,1]
plot(hc.c)
setClass(Class="Candidate",
slots = c(name = "character",
party = "character",
delegatesWon = "numeric",
delegatesNeeded = "numeric"
),
prototype = prototype(
name = NULL,
party = NULL,
delegatesWon = numeric(),
delegatesNeeded = numeric()
),
#Need to make sure the party is democratic or republican to identify number of delegates
validity = function(object){
if(object@party != "Republican" & object@party != "Democrat"){
stop("Party have to be Republican or Democrat")
}
}
)
setMethod("initialize", "Candidate",
function(.Object, name, party, delegatesWon){
# assign .Object attributes to variables
.Object@name <- name
.Object@party <- party
.Object@delegatesWon <- delegatesWon
#Delegates needed according to the party
if(party=="Republican"){
.Object@delegatesNeeded <- 1237
}
if(party=="Democrat"){
.Object@delegatesNeeded <- 2383
}
value=callNextMethod()
return(value)
}
)
setMethod("show", "Candidate",
function(object){
cat(paste0("Name of the candiate: ", object@name, "\n Party: ", object@party,
"\n Delegates Won: ", object@delegatesWon, "\n Delegates needed: ", object@delegatesNeeded))
if(class(object)=="Remaining")  cat(paste0("\n remain_prop':\n", object@remain_prop))
})
print.Candidate <- function(object){
cat(paste0("Name of the candiate: ", object@name, "\n Party: ", object@party,
"\n Delegates Won: ", object@delegatesWon, "\n Delegates needed: ", object@delegatesNeeded))
if(class(object)=="Remaining")  cat(paste0("\n remain_prop':\n", object@remain_prop))
}
# create generic for method for createCandidate
setGeneric(name = "createCandidate",
def=function(name, delegatesWon, party)
{standardGeneric("createCandidate")}
)
# create method to generate object of class Candidate
setMethod(f="createCandidate",
definition=function(name, delegatesWon, party){
# return object of class Candidate
return(new("Candidate", name = name, delegatesWon = delegatesWon, party = party))
}
)
setGeneric(name = "propNeeded",
def = function(object, remainingDelegates=NULL){
if(!is.numeric(remainingDelegates))  stop("remainingDelegates must be numeric")
standardGeneric("propNeeded")
}
)
setMethod(f="propNeeded", definition = function(object, remainingDelegates){
#Proportion of delegates needed
delegateProp <- (object@delegatesNeeded - object@delegatesWon) / remainingDelegates
#Proportion cannot be greater than one
if(delegateProp > 1) stop("The candidate already lost or the number of delegates remaining should be higher")
return(delegateProp)
}
)
setClass(Class="Race", slots =
c(Candidates = "list",
party = "character",
delegatesNeeded = "numeric",
delegatesRemaining = "numeric"
),
prototype = prototype(
Candidates = NULL,
party = NULL,
delegatesNeeded = numeric(),
delegatesRemaining = numeric()
),
#Party should be Democrat or Republican, and all from the same party
validity = function(object){
if(object@party != "Republican" & object@party != "Democrat"){
stop("Only Republican or Democrat")
}
if(length(unique(sapply(object@Candidates, function(x){x@party})))!=1){
stop("All candidates most be from the same party")
}
}
)
setMethod("initialize", "Race", function(.Object, Candidates, party){
.Object@Candidates <- Candidates
.Object@party <- party
if(.Object@party=="Republican"){
totalWon <- sum(sapply(1:length(Candidates), FUN=function(i) Candidates[[i]]@delegatesWon))
.Object@delegatesRemaining <- 2472 - totalWon
if (.Object@delegatesRemaining<0) stop("The delegates sum is incorrect")
.Object@delegatesNeeded <- 1237
}
if(.Object@party=="Democrat"){
totalWon <- sum(sapply(1:length(Candidates), FUN=function(i) Candidates[[i]]@delegatesWon))
.Object@delegatesRemaining <- 4765 - totalWon
if (.Object@delegatesRemaining<0) stop("The delegates sum is incorrect")
.Object@delegatesNeeded <- 2383
}
value=callNextMethod()
return(value)
}
)
setGeneric(name = "createRace",
def=function(Candidates, party)
{standardGeneric("createRace")}
)
# create method to generate object of class Race
setMethod(f="createRace",
definition=function(Candidates, party){
# return object of class createRace
return(new("Race", Candidates = Candidates, party = party))
}
)
clinton <- createCandidate("Clinton", 1614, "Democrat")
sanders <- createCandidate("Sanders", 856, "Democrat")
Candidates <- list(clinton, sanders)
demRace <- createRace(Candidates = list(clinton, sanders), party = "Democrat")
Race <- createRace(Candidates = list(clinton, sanders), party = "Democrat")
?barplot
Race$Candidates
Race@Candidates
str(Race@Candidates)
Race@Candidates@delegatesWon
sapply(Race, function(x) x$Candidates)})
sapply(Race, function(x) x$Candidates))
sapply(Race, function(x) x$Candidates)
sapply(Race, function(x) x@Candidates)
sapply(Race@Candidates, function(x) x@delegatesWon)
setMethod("initialize", "Race", function(.Object, Candidates, party){
.Object@Candidates <- Candidates
.Object@party <- party
if(.Object@party=="Republican"){
totalWon <- sum(sapply(Race@Candidates, function(x) x@delegatesWon))
.Object@delegatesRemaining <- 2472 - totalWon
if (.Object@delegatesRemaining<0) stop("The delegates sum is incorrect")
.Object@delegatesNeeded <- 1237
}
if(.Object@party=="Democrat"){
totalWon <- sum(sapply(Race@Candidates, function(x) x@delegatesWon))
.Object@delegatesRemaining <- 4765 - totalWon
if (.Object@delegatesRemaining<0) stop("The delegates sum is incorrect")
.Object@delegatesNeeded <- 2383
}
value=callNextMethod()
return(value)
}
)
Race <- createRace(Candidates = list(clinton, sanders), party = "Democrat")
Race
sapply(Race@Candidates, function(x) x@name)
x=Race
delegatesWon <- sapply(x@Candidates, function(z) z@delegatesWon)
delegatesNeeded <-x@delegatesNeeded
names <- sapply(x@Candidates, function(z) z@name)
if(x@party == "Democrat") color <- "blue"
else  color <- "red"
barplot(delegatesWon)
color
barplot(delegatesWon, beside=T,
main=paste0("Delegates by candidate for", x@party, "primaries"),
ylab="Number of Delegates", xlab = "Candidates",
ylim=c(0, x@delegatesNeeded + 200), col = color)
abline(h = delegatesNeeded, lty = 3)
names
barplot(delegatesWon, beside=T,
main=paste0("Delegates by candidate for", x@party, "primaries"),
ylab="Number of Delegates", xlab = "Candidates",
names.arg=names,
ylim=c(0, x@delegatesNeeded + 200), col = color)
setMethod(f="plot", signature="Race", definition=function(x=NULL, y=x, ...){
#Vector of Delegates won by each candidates
delegatesWon <- sapply(x@Candidates, function(z) z@delegatesWon)
# create delegates needed to win for each candidate
delegatesNeeded <-x@delegatesNeeded
# Names of the candidates
names <- sapply(x@Candidates, function(z) z@name)
#Color according to the party
if(x@party == "Democrat") color <- "blue"
if(x@party == "Republican") color <- "red"
#Create barplot
barplot(delegatesWon, beside=T,
main=paste0("Delegates by candidate for", x@party, "primaries"),
ylab="Number of Delegates", xlab = "Candidates",
names.arg=names,
ylim=c(0, x@delegatesNeeded + 200), col = color)
abline(h = delegatesNeeded, lty = 3)
}
)
plot(Race)
dev.off()
plot(Race)
xx <- barplot(delegatesWon, beside=T,
main=paste0("Delegates by candidate for", x@party, "primaries"),
ylab="Number of Delegates", xlab = "Candidates",
names.arg=names,
ylim=c(0, x@delegatesNeeded + 200), col = color)
text(x = xx, y = delegatesWon, label = delegatesWon, pos = 3, cex = 0.8, col = "black")
abline(h = delegatesNeeded, lty = 3)
setMethod(f="plot", signature="Race", definition=function(x=NULL, y=x, ...){
#Vector of Delegates won by each candidates
delegatesWon <- sapply(x@Candidates, function(z) z@delegatesWon)
# create delegates needed to win for each candidate
delegatesNeeded <-x@delegatesNeeded
# Names of the candidates
names <- sapply(x@Candidates, function(z) z@name)
#Color according to the party
if(x@party == "Democrat") color <- "blue"
if(x@party == "Republican") color <- "red"
#Create barplot
xx <- barplot(delegatesWon, beside=T,
main=paste0("Delegates by candidate for", x@party, "primaries"),
ylab="Number of Delegates", xlab = "Candidates",
names.arg=names,
ylim=c(0, x@delegatesNeeded + 200), col = color)
text(x = xx, y = delegatesWon, label = delegatesWon, pos = 3, cex = 0.8, col = "black")
abline(h = delegatesNeeded, lty = 3)
}
)
plot(Race)
dev.off()
plot(Race)
setwd("C:/Users/MauricioAndresVela/Documents/R/Clase/PS6")
package.skeleton(code_files = c("primaryRacePack-package.R", "Candidate.R",
"createCandidate.R", "propNeeded.R","createRace.R", "Race.R"), name="primary_package"
)
package.skeleton(code_files = c("Candidate.R", "createCandidate.R", "propNeeded.R","createRace.R", "Race.R"), name="primary_package")
library(devtools)
library(roxygen2)
current.code <- as.package("primary_package")
load_all(current.code)
current.code <- as.package("primary_package")
load_all(current.code)
package.skeleton(code_files = c("primary_package.R", "Candidate.R", "createCandidate.R", "propNeeded.R","createRace.R", "Race.R"), name="primary_package")
current.code <- as.package("primary_package")
load_all(current.code)
package.skeleton(code_files = c("primary_package.R", "Candidate.R", "createCandidate.R", "propNeeded.R","createRace.R", "Race.R"), name="primary_package")
devtools::create("primary_package")
package.skeleton(code_files = c("primarypackage.R", "Candidate.R", "createCandidate.R", "propNeeded.R","createRace.R", "Race.R"), name="primary_package")
current.code <- as.package("primarypackage")
package.skeleton(code_files = c("primarypackage.R", "Candidate.R", "createCandidate.R", "propNeeded.R","createRace.R", "Race.R"), name="primarypackage")
current.code <- as.package("primarypackage")
load_all(current.code)
document(current.code)
package.skeleton(code_files = c("primarypackage.R", "Candidate.R", "createCandidate.R", "propNeeded.R","createRace.R", "Race.R"), name="primarypackage")
current.code <- as.package("primarypackage")
load_all(current.code)
document(current.code)
package.skeleton(code_files = c("primarypackage.R", "Candidate.R", "createCandidate.R", "propNeeded.R","createRace.R", "Race.R"), name="primarypackage")
current.code <- as.package("primarypackage")
load_all(current.code)
document(current.code)
?primarypackage
check(current.code)
package.skeleton(code_files = c("primarypackage-package.R", "Candidate.R", "createCandidate.R", "propNeeded.R","createRace.R", "Race.R"), name="primarypackage")
current.code <- as.package("primarypackage")
load_all(current.code)
document(current.code)
check(current.code)
setwd("C:/Users/MauricioAndresVela/Documents/R/Clase/PS6")
package.skeleton(code_files = c("primarypackage-package.R", "Candidate.R", "createCandidate.R", "propNeeded.R","createRace.R", "Race.R"), name="primarypackage")
current.code <- as.package("primarypackage")
load_all(current.code)
document(current.code)
check(current.code)
package.skeleton(code_files = c("primarypackage-package.R", "Candidate.R", "createCandidate.R", "propNeeded.R","createRace.R", "Race.R"), name="primarypackage")
current.code <- as.package("primarypackage")
load_all(current.code)
load_all(current.code)
document(current.code)
check(current.code)
Candidate <-createCandidate("Obama", 1000, "Democrat")
propNeeded(Candidate, 3000)
devtools::create("primarypackage")
package.skeleton(code_files = c("primarypackage-package.R", "Candidate.R", "createCandidate.R", "propNeeded.R","createRace.R", "Race.R"), name="primarypackage")
current.code <- as.package("primarypackage")
load_all(current.code)
load_all(current.code)
document(current.code)
check(current.code)
current.code <- as.package("primarypackage")
load_all(current.code)
document(current.code)
check(current.code)
library(primarypacakage)
package.skeleton(code_files = c("primarypackage-package.R", "Candidate.R", "createCandidate.R", "propNeeded.R","createRace.R", "Race.R"), name="primarypackage")
current.code <- as.package("primarypackage")
current.code <- as.package("primarypackage")
load_all(current.code)
current.code <- as.package("primarypackage")
load_all(current.code)
document(current.code)
check(current.code)
